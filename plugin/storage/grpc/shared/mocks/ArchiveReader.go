// Code generated by mockery v1.0.0. DO NOT EDIT.

// Copyright (c) 2020 The Jaeger Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/jaegertracing/jaeger/model"
)

// ArchiveReader is an autogenerated mock type for the ArchiveReader type
type ArchiveReader struct {
	mock.Mock
}

// ArchiveSupported provides a mock function with given fields: ctx
func (_m *ArchiveReader) ArchiveSupported(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArchiveTrace provides a mock function with given fields: ctx, traceID
func (_m *ArchiveReader) GetArchiveTrace(ctx context.Context, traceID model.TraceID) (*model.Trace, error) {
	ret := _m.Called(ctx, traceID)

	var r0 *model.Trace
	if rf, ok := ret.Get(0).(func(context.Context, model.TraceID) *model.Trace); ok {
		r0 = rf(ctx, traceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Trace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.TraceID) error); ok {
		r1 = rf(ctx, traceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
