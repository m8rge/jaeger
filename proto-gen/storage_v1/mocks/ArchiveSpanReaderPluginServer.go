// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	storage_v1 "github.com/jaegertracing/jaeger/proto-gen/storage_v1"
	mock "github.com/stretchr/testify/mock"
)

// ArchiveSpanReaderPluginServer is an autogenerated mock type for the ArchiveSpanReaderPluginServer type
type ArchiveSpanReaderPluginServer struct {
	mock.Mock
}

// ArchiveSupported provides a mock function with given fields: _a0, _a1
func (_m *ArchiveSpanReaderPluginServer) ArchiveSupported(_a0 context.Context, _a1 *storage_v1.ArchiveSupportedRequest) (*storage_v1.ArchiveSupportedResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storage_v1.ArchiveSupportedResponse
	if rf, ok := ret.Get(0).(func(context.Context, *storage_v1.ArchiveSupportedRequest) *storage_v1.ArchiveSupportedResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage_v1.ArchiveSupportedResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *storage_v1.ArchiveSupportedRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArchiveTrace provides a mock function with given fields: _a0, _a1
func (_m *ArchiveSpanReaderPluginServer) GetArchiveTrace(_a0 *storage_v1.GetTraceRequest, _a1 storage_v1.ArchiveSpanReaderPlugin_GetArchiveTraceServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*storage_v1.GetTraceRequest, storage_v1.ArchiveSpanReaderPlugin_GetArchiveTraceServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
